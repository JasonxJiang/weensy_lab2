Name: Jason Jiang
UCLA ID: 604409327

Collaborators:

-------------------------------------------------------------------------------

Response to Exercise 1:

The name of the scheduling algorithm is:
Non premptive scheduling algorithm.
Also according to the TA this is also an example of round robin scheduling algorithm.

(Exercise 2 is a coding exercise)


Response to Exercise 3:

Turnaround time = burstTime + waitingTime 
burst time for all processes = 320 * one millisecond to print out the character 
Wait time for process 
Average turnaround time for scheduling_algorithm 0:
Process 1 executes at time 0 
Process 2 executes at time 1
Process 3 executes at time 2
Process 4 executes at time 3

Process 1 ends at 1280 - 3 = 1277
Process 2 ends at 1280 - 2 = 1278
Process 3 ends at 1280 - 1 = 1279
Process 4 ends at 1280 =     1280

= (1280 + 1279 + 1278 + 1277)/4 = 1278.5 ms 

Average turnaround time for scheduling_algorithm 1:
All four processes have the same burst time (320 * 1 millisecond)
waiting time for each process 
Process 1: 0 
Process 2: 320 
Process 3: 640 
Process 4: 920 

= ((0 + 320) + (320 + 320) + (320 + 640) + (320 + 920))/4 = 800 ms
Average wait time for scheduling_algorithm 0:
Process 1 waits 0 to start 
Process 2 waits 1 to start 
Process 3 waits 2 to start 
Process waits 3 to start 

(0 + 1 + 2 +3)/4 = 1.5 milliseconds

Average wait time for scheduling_algorithm 1:

Process 1 starts at 0 and ends at 320 
Process 2 starts at 321 and ends at 640 
Process 3 starts at 641 and ends at 920 
Process 4 starts at 921 and ends at 1280 

(0 + 320 + 640 + 920)/ 4 = 480 ms


Exercise 4:

Did you complete Exercise 4A, Exercise 4B, or both for extra credit?
I did both exercise 4A and 4B for extra credit 

4A Implementation 
Define int field p_priority in process struct to store priority level of the process
Implement a system call sys_priority() that takes a parameter of priority level and store it in the eax register of the process.
Define the interrupt case for INT_PRIORITY_SET where process p_priority field is set to the passed in priority level.

To implement the priority algorithm,
Look for the lowest priority level in all the processes
Run the round robin algorithm from scheduling algorithm 0 to allowing alternation between process only with the condition that the process must also be equal to or lower than the current lowest priority level.

4B Implementation
I defined the int fields p_share in the process struct to store the share of running time that each process has. I also added in the field p_times_run that kept a count of when the process was allowed to run.
I also implemented a system call sys_share() that takes a parameter of a priority share and store it in the eax register of the process.
Define the interrupt case for INT_PRIORITY_SHARE where p p_share field is set to the passed in priority share value from the system call.

To implement the proporitional share algorithm
I checked the p_times_run field of the process. If it was lower than its p_share I would run the process. If the p_times_run was greater or equal to its p_share I would reset its value to 0 but not run it in that iteration. I would run this logic over every process that ran.

Exercise 5:
The first known interrupt occurs on process 4. This is seen since we see that the printing
of the numbers results in 
123412341234...1231234 
A four was not printed indicating that process 4 did not finish executing and was thus 
not able to print out a 4. 


(Exercise 6 is a coding exercise)
To fix the race condition I implemented my own system call in schedos-app.h sys_print(int print).
The system call prints out the character which I pass in as a parameter that the process was supposed to print into the eax registerand cannot be interrupted by the clock.
I then defined the interrupt case INT_SYS_USER1 to print out the character and to increment the position of the cursor.

Anything else you'd like us to know:



Extra credit exercises:

Exercise 7:
I implemented a lottery scheduling algorithm (labeld 4 for the scheduling algorithm)
To do this, I added a field to the process struct that represented the ticket the process head. 
I also implemented a system call that would take an int as a parameter and store the ticket in the eax register of the process.
I defined the interrupt case for INT_LOTTERY_TICKET_SET where the p_ticket field is set to the passed in ticket from the system call.

To implement the lottery scheduling algorithm, I created my own functions mysrand(int seed) and rand(). 
srand(int) would set a seed that the function rand would use to generate a random int. I used this random int to determine what ticket would be serviced in my scheduling algorithm. Only the ticket with the matching number in that iteration would be run.


Exercise 8:
I implemented another synchronizing mechanism for printing characters by define another variable called mutex wihin the shared memory. I added this new variable to 'schedos.h' similar to how curposs was added. Afterwards I also defined a memory location for this shared mutex variable in 'schedos-symbols.ld'. 

In order to employ this lock, you call the atomic_swap function given in x86sync.h and pass in the shared variable mutex.

